definitions:
  database.Customer:
    properties:
      email:
        type: string
      id:
        type: integer
      orders:
        items:
          $ref: '#/definitions/database.Order'
        type: array
      registrationDate:
        type: string
      role:
        type: string
    type: object
  database.Order:
    properties:
      customer:
        $ref: '#/definitions/database.Customer'
      customerID:
        type: integer
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/database.OrderItem'
        type: array
      orderDate:
        type: string
      status:
        type: string
    type: object
  database.OrderItem:
    properties:
      id:
        type: integer
      orderID:
        type: integer
      price:
        format: float64
        type: number
      product:
        $ref: '#/definitions/database.Product'
      productID:
        type: integer
      quantity:
        type: integer
    type: object
  database.Product:
    properties:
      id:
        type: integer
      name:
        type: string
      price:
        format: float64
        type: number
    type: object
  router.CreateOrderInput:
    properties:
      items:
        items:
          $ref: '#/definitions/router.CreateOrderItemInput'
        minItems: 1
        type: array
    required:
    - items
    type: object
  router.CreateOrderItemInput:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
    required:
    - product_id
    - quantity
    type: object
  router.HTTPError:
    properties:
      error:
        example: Product not found
        type: string
    type: object
  router.LoginInput:
    properties:
      email:
        example: Test@gmail.com
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  router.SuccessMessage:
    properties:
      message:
        example: Product deleted successfully
        type: string
    type: object
  router.UpdateProductInput:
    properties:
      name:
        type: string
      price:
        minimum: 0
        type: number
    required:
    - name
    type: object
info:
  contact: {}
  description: Этот API предоставляет эндпоинты для управления товарами, пользователями
    и заказами.
  title: API для простого интернет-магазина
  version: "1.0"
paths:
  /orders:
    get:
      description: Возвращает все заказы, сделанные аутентифицированным пользователем,
        с полной информацией о товарах.
      produces:
      - application/json
      responses:
        "200":
          description: Массив заказов пользователя
          schema:
            items:
              $ref: '#/definitions/database.Order'
            type: array
        "401":
          description: Ошибка аутентификации
          schema:
            $ref: '#/definitions/router.HTTPError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/router.HTTPError'
      security:
      - BearerAuth: []
      summary: Получить список заказов пользователя
      tags:
      - Заказы (Orders)
    post:
      consumes:
      - application/json
      description: Создает новый заказ для аутентифицированного пользователя. Требует
        список ID товаров и их количество.
      parameters:
      - description: Данные для создания нового заказа
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/router.CreateOrderInput'
      produces:
      - application/json
      responses:
        "201":
          description: Возвращает созданный заказ со всеми позициями
          schema:
            $ref: '#/definitions/database.Order'
        "400":
          description: Ошибка валидации входных данных
          schema:
            $ref: '#/definitions/router.HTTPError'
        "401":
          description: Ошибка аутентификации
          schema:
            $ref: '#/definitions/router.HTTPError'
        "404":
          description: Один или несколько товаров не найдены
          schema:
            $ref: '#/definitions/router.HTTPError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/router.HTTPError'
      security:
      - BearerAuth: []
      summary: Создать новый заказ
      tags:
      - Заказы (Orders)
  /orders/pending:
    get:
      description: Возвращает список всех заказов в статусе "Pending". Доступно только
        для администраторов.
      produces:
      - application/json
      responses:
        "200":
          description: Список незавершенных заказов
          schema:
            items:
              $ref: '#/definitions/database.Order'
            type: array
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/router.HTTPError'
      security:
      - BearerAuth: []
      summary: Получить список всех незавершенных заказов
      tags:
      - Администрирование (Admin)
  /products:
    get:
      description: Возвращает массив всех товаров, доступных в магазине
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Product'
            type: array
      summary: Получить список всех товаров
      tags:
      - Товары (Products)
    post:
      consumes:
      - application/json
      description: Добавляет новый товар в базу данных. ID в теле запроса игнорируется.
      parameters:
      - description: Данные для создания нового товара
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/database.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.HTTPError'
      security:
      - BearerAuth: []
      summary: Создать новый товар
      tags:
      - Товары (Products)
  /products/{id}:
    delete:
      description: Удаляет товар из базы данных по его ID
      parameters:
      - description: ID Товара для удаления
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.SuccessMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/router.HTTPError'
      security:
      - BearerAuth: []
      summary: Удалить товар
      tags:
      - Товары (Products)
    get:
      description: Получает информацию о конкретном товаре по его ID
      parameters:
      - description: ID Товара
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.HTTPError'
      summary: Получить товар по ID
      tags:
      - Товары (Products)
    put:
      consumes:
      - application/json
      description: Полностью обновляет информацию о товаре с указанным ID
      parameters:
      - description: ID Товара для обновления
        in: path
        name: id
        required: true
        type: integer
      - description: Новые данные для товара
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/router.UpdateProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.HTTPError'
      security:
      - BearerAuth: []
      summary: Обновить существующий товар
      tags:
      - Товары (Products)
  /users/{id}/promote:
    post:
      description: Позволяет администратору назначить другого пользователя администратором.
      parameters:
      - description: ID пользователя, которого нужно повысить
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Сообщение об успешном повышении
          schema:
            $ref: '#/definitions/router.SuccessMessage'
        "400":
          description: Некорректный ID пользователя
          schema:
            $ref: '#/definitions/router.HTTPError'
        "403":
          description: Попытка повысить самого себя
          schema:
            $ref: '#/definitions/router.HTTPError'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/router.HTTPError'
        "409":
          description: Пользователь уже является администратором
          schema:
            $ref: '#/definitions/router.HTTPError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/router.HTTPError'
      security:
      - BearerAuth: []
      summary: Повысить пользователя до администратора
      tags:
      - Администрирование (Admin)
  /users/login:
    post:
      consumes:
      - application/json
      description: Проверяет учетные данные и в случае успеха возвращает JWT токен.
      parameters:
      - description: Учетные данные для входа
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/router.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: JWT токен
          schema:
            properties:
              token:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.HTTPError'
      summary: Вход пользователя в систему
      tags:
      - Пользователи (Auth)
  /users/me:
    get:
      description: Возвращает данные пользователя, аутентифицированного с помощью
        JWT токена.
      produces:
      - application/json
      responses:
        "200":
          description: Данные текущего пользователя
          schema:
            $ref: '#/definitions/database.Customer'
        "401":
          description: Ошибка аутентификации
          schema:
            $ref: '#/definitions/router.HTTPError'
        "404":
          description: Пользователь из токена не найден в БД
          schema:
            $ref: '#/definitions/router.HTTPError'
      security:
      - BearerAuth: []
      summary: Получить информацию о текущем пользователе
      tags:
      - Пользователи (Auth)
  /users/register:
    post:
      consumes:
      - application/json
      description: Создает новый аккаунт пользователя с email и паролем.
      parameters:
      - description: Данные для регистрации
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/router.LoginInput'
      produces:
      - application/json
      responses:
        "201":
          description: Возвращает созданного пользователя
          schema:
            $ref: '#/definitions/database.Customer'
        "400":
          description: Ошибка валидации входных данных
          schema:
            $ref: '#/definitions/router.HTTPError'
        "409":
          description: Пользователь с таким email уже существует
          schema:
            $ref: '#/definitions/router.HTTPError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/router.HTTPError'
      summary: Регистрация нового пользователя
      tags:
      - Пользователи (Auth)
securityDefinitions:
  BearerAuth:
    description: '"Для доступа к защищенным эндпоинтам введите ''Bearer '' (с пробелом),
      а затем ваш JWT. Пример: Bearer eyJhbGciOiJI..."'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
